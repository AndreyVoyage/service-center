/* apps/cms/src/lib/notifyManagers.ts */
import nodemailer from 'nodemailer'
import axios from 'axios'
import type { FormSubmission } from '@/payload-types'
import type { Payload } from 'payload'

export async function notifyManagers(
  doc: FormSubmission,
  payload: Payload
): Promise<void> {
  const { formType, data } = doc
  const subject = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${formType}`
  const html = `
    <p><b>–¢–∏–ø:</b> ${formType}</p>
    <p><b>–î–∞–Ω–Ω—ã–µ:</b></p>
    <pre>${JSON.stringify(data, null, 2)}</pre>
  `

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ NotificationsGlobal
  const settings = await payload.findGlobal({
    slug: 'notifications',
  })

  // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
  const ch = (settings as any)?.channels

  /* 2Ô∏è‚É£ Email (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ) */
  if (ch?.email?.enabled && ch.email.smtpHost && ch.email.user && ch.email.pass && ch.email.recipient) {
    const transporter = nodemailer.createTransport({
      host: ch.email.smtpHost,
      port: ch.email.smtpPort ?? 587,
      secure: ch.email.secure ?? false,
      auth: { user: ch.email.user, pass: ch.email.pass }
    })
    await transporter.sendMail({
      from: ch.email.user,
      to: ch.email.recipient,
      subject,
      html
    })
    console.log('[notify] Email queued')
  }

  /* 3Ô∏è‚É£ Telegram (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –í–°–ï –ø–æ–ª—è) */
  const tg = ch?.telegram
  if (tg?.enabled && tg.botToken?.trim() && tg.chatId?.trim()) {
    try {
      const msg = `üì© <b>${subject}</b>\n<code>${JSON.stringify(data, null, 2)}</code>`
      await axios.post(
        `https://api.telegram.org/bot${tg.botToken.trim()}/sendMessage`,
        { chat_id: tg.chatId.trim(), text: msg, parse_mode: 'HTML' }
      )
      console.log('[notify] Telegram sent')
    } catch (err: any) {
      console.warn('[notify] Telegram error:', err.message)
    }
  }

  /* 4Ô∏è‚É£ WhatsApp (–∑–∞–≥–æ—Ç–æ–≤–∫–∞) */
  if (ch?.whatsapp?.enabled) {
    // –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  }
}